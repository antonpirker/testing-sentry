{
    // trimmed
    "exception": {
      "values": [
        {
          "type": "Group.DoesNotExist",
          "value": "",
          "module": "sentry.models.group",
          "stacktrace": {
            "frames": [
              {
                "function": "<module>",
                "module": "__main__",
                "filename": "<string>",
                "abs_path": "/usr/src/getsentry/<string>",
                "lineno": 1,
                "context_line": "from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=12, pipe_handle=28)",
                "in_app": true,
                "vars": {
                  "__annotations__": {},
                  "__builtins__": "<module 'builtins' (built-in)>",
                  "__doc__": "None",
                  "__loader__": "<class '_frozen_importlib.BuiltinImporter'>",
                  "__name__": "'__main__'",
                  "__package__": "None",
                  "__spec__": "None",
                  "spawn_main": "<function spawn_main at 0x7dafa73009a0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "spawn_main",
                "module": "multiprocessing.spawn",
                "filename": "multiprocessing/spawn.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/spawn.py",
                "lineno": 122,
                "pre_context": [
                  "    else:",
                  "        from . import resource_tracker",
                  "        resource_tracker._resource_tracker._fd = tracker_fd",
                  "        fd = pipe_handle",
                  "        parent_sentinel = os.dup(pipe_handle)"
                ],
                "context_line": "    exitcode = _main(fd, parent_sentinel)",
                "post_context": [
                  "    sys.exit(exitcode)",
                  "",
                  "",
                  "def _main(fd, parent_sentinel):",
                  "    with os.fdopen(fd, 'rb', closefd=True) as from_parent:"
                ],
                "in_app": false,
                "vars": {
                  "fd": "28",
                  "parent_pid": "None",
                  "parent_sentinel": "3",
                  "pipe_handle": "28",
                  "resource_tracker": "<module 'multiprocessing.resource_tracker' from '/usr/local/lib/python3.13/multiprocessing/resource_tracker.py'>",
                  "tracker_fd": "12"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_main",
                "module": "multiprocessing.spawn",
                "filename": "multiprocessing/spawn.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/spawn.py",
                "lineno": 135,
                "pre_context": [
                  "            preparation_data = reduction.pickle.load(from_parent)",
                  "            prepare(preparation_data)",
                  "            self = reduction.pickle.load(from_parent)",
                  "        finally:",
                  "            del process.current_process()._inheriting"
                ],
                "context_line": "    return self._bootstrap(parent_sentinel)",
                "post_context": [
                  "",
                  "",
                  "def _check_not_importing_main():",
                  "    if getattr(process.current_process(), '_inheriting', False):",
                  "        raise RuntimeError('''"
                ],
                "in_app": false,
                "vars": {
                  "fd": "28",
                  "from_parent": "<_io.BufferedReader name=28>",
                  "parent_sentinel": "3",
                  "preparation_data": {
                    "authkey": "[Filtered]",
                    "dir": "'/usr/src/getsentry'",
                    "init_main_from_name": "'sentry.__main__'",
                    "log_to_stderr": "False",
                    "name": "'SpawnPoolWorker-6'",
                    "orig_dir": "'/usr/src/getsentry'",
                    "start_method": "'fork'",
                    "sys_argv": [
                      "'/usr/src/sentry/src/sentry/__main__.py'",
                      "'run'",
                      "'consumer'",
                      "'events-subscription-results'",
                      "'--consumer-group=sentry-events-subscription-results-consumers'",
                      "'--'",
                      "'--processes=8'"
                    ],
                    "sys_path": [
                      "'/usr/src/getsentry'",
                      "'/usr/src/sentry/src'",
                      "'/usr/src/getsentry'",
                      "'/usr/src/sentry/src'",
                      "'/usr/src/getsentry'",
                      "'/usr/local/lib/python313.zip'",
                      "'/usr/local/lib/python3.13'",
                      "'/usr/local/lib/python3.13/lib-dynload'",
                      "'/.venv/lib/python3.13/site-packages'",
                      "'/usr/src/sentry/src'"
                    ]
                  },
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_bootstrap",
                "module": "multiprocessing.process",
                "filename": "multiprocessing/process.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/process.py",
                "lineno": 313,
                "pre_context": [
                  "            finally:",
                  "                # delay finalization of the old process object until after",
                  "                # _run_after_forkers() is executed",
                  "                del old_process",
                  "            util.info('child process calling self.run()')"
                ],
                "context_line": "            self.run()",
                "post_context": [
                  "            exitcode = 0",
                  "        except SystemExit as e:",
                  "            if e.code is None:",
                  "                exitcode = 0",
                  "            elif isinstance(e.code, int):"
                ],
                "in_app": false,
                "vars": {
                  "context": "<module 'multiprocessing.context' from '/usr/local/lib/python3.13/multiprocessing/context.py'>",
                  "parent_sentinel": "3",
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>",
                  "util": "<module 'multiprocessing.util' from '/usr/local/lib/python3.13/multiprocessing/util.py'>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "run",
                "module": "multiprocessing.process",
                "filename": "multiprocessing/process.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/process.py",
                "lineno": 108,
                "pre_context": [
                  "    def run(self):",
                  "        '''",
                  "        Method to be run in sub-process; can be overridden in sub-class",
                  "        '''",
                  "        if self._target:"
                ],
                "context_line": "            self._target(*self._args, **self._kwargs)",
                "post_context": [
                  "",
                  "    def start(self):",
                  "        '''",
                  "        Start child process",
                  "        '''"
                ],
                "in_app": false,
                "vars": {
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "worker",
                "module": "multiprocessing.pool",
                "filename": "multiprocessing/pool.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/pool.py",
                "lineno": 125,
                "pre_context": [
                  "            util.debug('worker got sentinel -- exiting')",
                  "            break",
                  "",
                  "        job, i, func, args, kwds = task",
                  "        try:"
                ],
                "context_line": "            result = (True, func(*args, **kwds))",
                "post_context": [
                  "        except Exception as e:",
                  "            if wrap_exception and func is not _helper_reraises_exception:",
                  "                e = ExceptionWithTraceback(e, e.__traceback__)",
                  "            result = (False, e)",
                  "        try:"
                ],
                "in_app": false,
                "vars": {
                  "completed": "49",
                  "get": "<bound method SimpleQueue.get of <multiprocessing.queues.SimpleQueue object at 0x7dafa7109010>>",
                  "initargs": [],
                  "initializer": "functools.partial(<function parallel_worker_initializer at 0x7dafa6e8dee0>, functools.partial(<function _initialize_arroyo_subprocess at 0x7dafa51df880>, initializer=None, tags={'consumer_group': 'sentry-events-subscription-results-consumers'}))",
                  "inqueue": "<multiprocessing.queues.SimpleQueue object at 0x7dafa7109010>",
                  "maxtasks": "None",
                  "outqueue": "<multiprocessing.queues.SimpleQueue object at 0x7dafa732a850>",
                  "put": "<bound method SimpleQueue.put of <multiprocessing.queues.SimpleQueue object at 0x7dafa732a850>>",
                  "task": [
                    "405",
                    "0",
                    "<function parallel_run_task_worker_apply at 0x7dafa6efbe20>",
                    [
                      "functools.partial(<function process_message at 0x7daf20673ec0>, <Dataset.Events: 'events'>, 'events-subscription-results', 'events-subscription-results')",
                      "<MessageBatch: 100 items, 52687 bytes>",
                      "SharedMemory('psm_7d98df1d', size=16777216)"
                    ],
                    {}
                  ],
                  "wrap_exception": "True"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "parallel_run_task_worker_apply",
                "module": "arroyo.processing.strategies.run_task_with_multiprocessing",
                "filename": "arroyo/processing/strategies/run_task_with_multiprocessing.py",
                "abs_path": "/.venv/lib/python3.13/site-packages/arroyo/processing/strategies/run_task_with_multiprocessing.py",
                "lineno": 252,
                "pre_context": [
                  "",
                  "        payload: Union[InvalidMessage, Message[Union[FilteredPayload, TResult]]]",
                  "",
                  "        try:",
                  "            payload = message.replace("
                ],
                "context_line": "                function(cast(Message[TStrategyPayload], message))",
                "post_context": [
                  "            )",
                  "        except InvalidMessage as e:",
                  "            payload = e",
                  "        except Exception:",
                  "            # The remote traceback thrown when retrieving the result from the"
                ],
                "in_app": false,
                "vars": {
                  "function": "functools.partial(<function process_message at 0x7daf20673ec0>, <Dataset.Events: 'events'>, 'events-subscription-results', 'events-subscription-results')",
                  "input_batch": "<MessageBatch: 100 items, 52687 bytes>",
                  "message": "Message({Partition(topic=Topic(name='events-subscription-results'), index=14): 2147953216})",
                  "next_index_to_process": "70",
                  "output_block": "SharedMemory('psm_7d98df1d', size=16777216)",
                  "payload": "Message({Partition(topic=Topic(name='events-subscription-results'), index=15): 2145299440})",
                  "start_index": "0",
                  "valid_messages_transformed": "<MessageBatch: 70 items, 0 bytes>"
                },
                "data": { "client_in_app": false }
              },
              {
                "function": "process_message",
                "module": "sentry.snuba.query_subscriptions.run",
                "filename": "sentry/snuba/query_subscriptions/run.py",
                "abs_path": "/usr/src/sentry/src/sentry/snuba/query_subscriptions/run.py",
                "lineno": 94,
                "pre_context": [
                  "        assert isinstance(value, BrokerValue)",
                  "        offset = value.offset",
                  "        partition = value.partition.index",
                  "        message_value = value.payload.value",
                  "        try:"
                ],
                "context_line": "            handle_message(",
                "post_context": [
                  "                message_value,",
                  "                offset,",
                  "                partition,",
                  "                topic,",
                  "                dataset.value,"
                ],
                "in_app": true,
                "vars": {
                  "dataset": "<Dataset.Events: 'events'>",
                  "handle_message": "<function handle_message at 0x7daf2a3eb9c0>",
                  "logical_topic": "'events-subscription-results'",
                  "message": "Message({Partition(topic=Topic(name='events-subscription-results'), index=14): 2147953216})",
                  "message_value": "b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}'",
                  "metrics": "<module 'sentry.utils.metrics' from '/usr/src/sentry/src/sentry/utils/metrics.py'>",
                  "offset": "2147953215",
                  "partition": "14",
                  "topic": "'events-subscription-results'",
                  "value": "BrokerValue(_BrokerValue__payload=KafkaPayload(key=b'60/7285b974098011efb28c12598142fbc4', value=b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}', headers=[]), partition=Partition(topic=Topic(name='events-subscription-results'), index=14), offset=2147953215, timestamp=datetime.datetime(2025, 7, 2, 16, 43, 0, 874000))"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "handle_message",
                "module": "sentry.snuba.query_subscriptions.consumer",
                "filename": "sentry/snuba/query_subscriptions/consumer.py",
                "abs_path": "/usr/src/sentry/src/sentry/snuba/query_subscriptions/consumer.py",
                "lineno": 176,
                "pre_context": [
                  "            span.set_attribute(\"subscription_resolution\", subscription.snuba_query.resolution)",
                  "            span.set_attribute(\"message_offset\", message_offset)",
                  "            span.set_attribute(\"message_partition\", message_partition)",
                  "            span.set_attribute(\"message_value\", message_value)",
                  ""
                ],
                "context_line": "            callback(contents, subscription)",
                "post_context": [
                  "",
                  "",
                  "class InvalidMessageError(Exception):",
                  "    pass",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "callback": "<function handle_snuba_query_update at 0x7daf2a3eba60>",
                  "contents": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  },
                  "dataset": "'events'",
                  "jsoncodec": "<sentry_kafka_schemas.codecs.json.JsonCodec object at 0x7daf20675010>",
                  "message_offset": "2147953215",
                  "message_partition": "14",
                  "message_value": "b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}'",
                  "scope": "<PotelScope id=0x7daf206c23f0 name=None type=ScopeType.ISOLATION>",
                  "subscription": "<QuerySubscription at 0x7daf185d8a50: id=191608>",
                  "topic": "'events-subscription-results'"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "handle_snuba_query_update",
                "module": "sentry.incidents.tasks",
                "filename": "sentry/incidents/tasks.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/tasks.py",
                "lineno": 41,
                "pre_context": [
                  "    \"\"\"",
                  "    from sentry.incidents.subscription_processor import SubscriptionProcessor",
                  "",
                  "    # noinspection SpellCheckingInspection",
                  "    with metrics.timer(\"incidents.subscription_procesor.process_update\"):"
                ],
                "context_line": "        SubscriptionProcessor(subscription).process_update(subscription_update)",
                "post_context": [
                  "",
                  "",
                  "@instrumented_task(",
                  "    name=\"sentry.incidents.tasks.handle_trigger_action\",",
                  "    queue=\"incidents\","
                ],
                "in_app": true,
                "vars": {
                  "SubscriptionProcessor": "<class 'sentry.incidents.subscription_processor.SubscriptionProcessor'>",
                  "subscription": "<QuerySubscription at 0x7daf185d8a50: id=191608>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "process_update",
                "module": "sentry.incidents.subscription_processor",
                "filename": "sentry/incidents/subscription_processor.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/subscription_processor.py",
                "lineno": 370,
                "pre_context": [
                  "                )",
                  "",
                  "        else:",
                  "            comparison_delta = self.alert_rule.comparison_delta",
                  ""
                ],
                "context_line": "        aggregation_value = self.get_aggregation_value(subscription_update, comparison_delta)",
                "post_context": [
                  "",
                  "        if aggregation_value is not None:",
                  "            if (",
                  "                has_metric_alert_processing",
                  "                and not self.alert_rule.detection_type == AlertRuleDetectionType.DYNAMIC"
                ],
                "in_app": true,
                "vars": {
                  "comparison_delta": "604800",
                  "dataset": "'events'",
                  "detector": "None",
                  "has_anomaly_detection": "True",
                  "has_metric_alert_processing": "False",
                  "organization": "<Organization at 0x7daf185d9130: id=1192616, owner_id=None, name='Boost Studios', slug='rabbithole'>",
                  "self": "<sentry.incidents.subscription_processor.SubscriptionProcessor object at 0x7daf181ec0f0>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_aggregation_value",
                "module": "sentry.incidents.subscription_processor",
                "filename": "sentry/incidents/subscription_processor.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/subscription_processor.py",
                "lineno": 245,
                "pre_context": [
                  "        if self.subscription.snuba_query.dataset == Dataset.Metrics.value:",
                  "            aggregation_value = self.get_crash_rate_alert_metrics_aggregation_value(",
                  "                subscription_update",
                  "            )",
                  "        else:"
                ],
                "context_line": "            aggregation_value = get_comparison_aggregation_value(",
                "post_context": [
                  "                subscription_update=subscription_update,",
                  "                snuba_query=self.subscription.snuba_query,",
                  "                organization_id=self.subscription.project.organization.id,",
                  "                project_ids=[self.subscription.project_id],",
                  "                comparison_delta=comparison_delta,"
                ],
                "in_app": true,
                "vars": {
                  "comparison_delta": "604800",
                  "self": "<sentry.incidents.subscription_processor.SubscriptionProcessor object at 0x7daf181ec0f0>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_comparison_aggregation_value",
                "module": "sentry.incidents.utils.process_update_helpers",
                "filename": "sentry/incidents/utils/process_update_helpers.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py",
                "lineno": 204,
                "pre_context": [
                  "            end,",
                  "            alert_rule_id,",
                  "        )",
                  "",
                  "    else:"
                ],
                "context_line": "        comparison_aggregate = get_aggregation_value(",
                "post_context": [
                  "            entity_subscription,",
                  "            subscription_update,",
                  "            snuba_query,",
                  "            project_ids,",
                  "            organization_id,"
                ],
                "in_app": true,
                "vars": {
                  "aggregation_value": "0",
                  "alert_rule_id": "226731",
                  "comparison_delta": "604800",
                  "delta": "datetime.timedelta(days=7)",
                  "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                  "organization_id": "1192616",
                  "project_ids": ["[Filtered]"],
                  "snuba_query": "<SnubaQuery at 0x7daf1857fa70: id=248822>",
                  "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_aggregation_value",
                "module": "sentry.incidents.utils.process_update_helpers",
                "filename": "sentry/incidents/utils/process_update_helpers.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py",
                "lineno": 156,
                "pre_context": [
                  "        query_builder.limit = Limit(1)",
                  "        results = query_builder.run_query(referrer=\"subscription_processor.comparison_query\")",
                  "        comparison_aggregate = list(results[\"data\"][0].values())[0]",
                  "",
                  "    except Exception:"
                ],
                "context_line": "        logger.exception(",
                "post_context": [
                  "            \"Failed to run comparison query\",",
                  "            extra={",
                  "                \"alert_rule_id\": alert_rule_id,",
                  "                \"subscription_id\": subscription_update.get(\"subscription_id\"),",
                  "                \"organization_id\": organization_id,"
                ],
                "in_app": true,
                "vars": {
                  "alert_rule_id": "226731",
                  "comparison_aggregate": "None",
                  "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                  "entity_subscription": "EventsEntitySubscription(query_type=<Type.ERROR: 0>, dataset=<Dataset.Events: 'events'>)",
                  "organization_id": "1192616",
                  "project_ids": ["[Filtered]"],
                  "snuba_query": "<SnubaQuery at 0x7daf1857fa70: id=248822>",
                  "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "exception",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1554,
                "pre_context": [
                  "",
                  "    def exception(self, msg, *args, exc_info=True, **kwargs):",
                  "        \"\"\"",
                  "        Convenience method for logging an ERROR with exception information.",
                  "        \"\"\""
                ],
                "context_line": "        self.error(msg, *args, exc_info=exc_info, **kwargs)",
                "post_context": [
                  "",
                  "    def critical(self, msg, *args, **kwargs):",
                  "        \"\"\"",
                  "        Log 'msg % args' with severity 'CRITICAL'.",
                  ""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "exc_info": "True",
                  "kwargs": {
                    "extra": {
                      "alert_rule_id": "226731",
                      "organization_id": "1192616",
                      "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                    }
                  },
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "error",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1548,
                "pre_context": [
                  "        a true value, e.g.",
                  "",
                  "        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=True)",
                  "        \"\"\"",
                  "        if self.isEnabledFor(ERROR):"
                ],
                "context_line": "            self._log(ERROR, msg, args, **kwargs)",
                "post_context": [
                  "",
                  "    def exception(self, msg, *args, exc_info=True, **kwargs):",
                  "        \"\"\"",
                  "        Convenience method for logging an ERROR with exception information.",
                  "        \"\"\""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "kwargs": {
                    "exc_info": "True",
                    "extra": {
                      "alert_rule_id": "226731",
                      "organization_id": "1192616",
                      "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                    }
                  },
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_log",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1664,
                "pre_context": [
                  "                exc_info = (type(exc_info), exc_info, exc_info.__traceback__)",
                  "            elif not isinstance(exc_info, tuple):",
                  "                exc_info = sys.exc_info()",
                  "        record = self.makeRecord(self.name, level, fn, lno, msg, args,",
                  "                                 exc_info, func, extra, sinfo)"
                ],
                "context_line": "        self.handle(record)",
                "post_context": [
                  "",
                  "    def handle(self, record):",
                  "        \"\"\"",
                  "        Call the handlers for the specified record.",
                  ""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "exc_info": [
                    "<class 'sentry.exceptions.InvalidSearchQuery'>",
                    "InvalidSearchQuery(\"Invalid value '['BOOST-INBOX-4K']' for 'issue:' filter\")",
                    "<traceback object at 0x7daf18479440>"
                  ],
                  "extra": {
                    "alert_rule_id": "226731",
                    "organization_id": "1192616",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                  },
                  "fn": "'/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py'",
                  "level": "40",
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>",
                  "sinfo": "None",
                  "stack_info": "False",
                  "stacklevel": "1"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "handle",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1680,
                "pre_context": [
                  "        maybe_record = self.filter(record)",
                  "        if not maybe_record:",
                  "            return",
                  "        if isinstance(maybe_record, LogRecord):",
                  "            record = maybe_record"
                ],
                "context_line": "        self.callHandlers(record)",
                "post_context": [
                  "",
                  "    def addHandler(self, hdlr):",
                  "        \"\"\"",
                  "        Add the specified handler to this logger.",
                  "        \"\"\""
                ],
                "in_app": false,
                "vars": {
                  "maybe_record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "callHandlers",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1736,
                "pre_context": [
                  "        found = 0",
                  "        while c:",
                  "            for hdlr in c.handlers:",
                  "                found = found + 1",
                  "                if record.levelno >= hdlr.level:"
                ],
                "context_line": "                    hdlr.handle(record)",
                "post_context": [
                  "            if not c.propagate:",
                  "                c = None    #break out",
                  "            else:",
                  "                c = c.parent",
                  "        if (found == 0):"
                ],
                "in_app": false,
                "vars": {
                  "c": "<RootLogger root (INFO)>",
                  "found": "2",
                  "hdlr": "<EventHandler (ERROR)>",
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "handle",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1026,
                "pre_context": [
                  "        rv = self.filter(record)",
                  "        if isinstance(rv, LogRecord):",
                  "            record = rv",
                  "        if rv:",
                  "            with self.lock:"
                ],
                "context_line": "                self.emit(record)",
                "post_context": [
                  "        return rv",
                  "",
                  "    def setFormatter(self, fmt):",
                  "        \"\"\"",
                  "        Set the formatter for this handler."
                ],
                "in_app": false,
                "vars": {
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "rv": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<EventHandler (ERROR)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_issue_filter_converter",
                "module": "sentry.search.events.datasets.discover",
                "filename": "sentry/search/events/datasets/discover.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/datasets/discover.py",
                "lineno": 1825,
                "pre_context": [
                  "        group_short_ids = [v for v in value if v and v != \"unknown\"]",
                  "        general_group_filter_values = [0 for v in value if not v or v == \"unknown\"]",
                  "",
                  "        if group_short_ids and self.builder.params.organization is not None:",
                  "            try:"
                ],
                "context_line": "                groups = Group.objects.by_qualified_short_id_bulk(",
                "post_context": [
                  "                    self.builder.params.organization.id,",
                  "                    group_short_ids,",
                  "                )",
                  "            except Exception:",
                  "                raise InvalidSearchQuery(f\"Invalid value '{group_short_ids}' for 'issue:' filter\")"
                ],
                "in_app": true,
                "vars": {
                  "general_group_filter_values": [],
                  "group_short_ids": ["'BOOST-INBOX-4K'"],
                  "operator": "'='",
                  "search_filter": [
                    ["'issue'"],
                    "'='",
                    ["'BOOST-INBOX-4K'", "False"]
                  ],
                  "self": "<sentry.search.events.datasets.discover.DiscoverDatasetConfig object at 0x7daf181b54f0>",
                  "value": ["'BOOST-INBOX-4K'"]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "by_qualified_short_id_bulk",
                "module": "sentry.models.group",
                "filename": "sentry/models/group.py",
                "abs_path": "/usr/src/sentry/src/sentry/models/group.py",
                "lineno": 373,
                "pre_context": [
                  "            ).filter(short_id_lookup, project__organization=organization_id)",
                  "        )",
                  "        group_lookup: set[int] = {group.short_id for group in groups}",
                  "        for short_id in short_ids:",
                  "            if short_id.short_id not in group_lookup:"
                ],
                "context_line": "                raise Group.DoesNotExist()",
                "post_context": [
                  "        return groups",
                  "",
                  "    def from_event_id(self, project, event_id):",
                  "        \"\"\"Resolves the 32 character event_id string into a Group for which it is found.\"\"\"",
                  "        group_id = None"
                ],
                "in_app": true,
                "vars": {
                  "groups": [],
                  "organization_id": "1192616",
                  "parsed_short_id": ["'boost-inbox'", "147"],
                  "project_short_id_lookup": { "boost-inbox": ["147"] },
                  "self": "<sentry.db.models.manager.base.GroupManager object at 0x7daf39ff9d30>",
                  "short_id": ["'boost-inbox'", "147"],
                  "short_id_lookup": "<Q: (AND: ('project__slug', 'boost-inbox'), ('short_id__in', [147]))>",
                  "short_id_raw": "'BOOST-INBOX-4K'",
                  "short_ids": [["'boost-inbox'", "147"]],
                  "short_ids_raw": ["'BOOST-INBOX-4K'"]
                },
                "data": { "client_in_app": true }
              }
            ]
          },
          "mechanism": {
            "type": "chained",
            "handled": true,
            "source": "__context__",
            "exception_id": 1,
            "parent_id": 0
          }
        },
        {
          "type": "InvalidSearchQuery",
          "value": "Invalid value '['BOOST-INBOX-4K']' for 'issue:' filter",
          "module": "sentry.exceptions",
          "stacktrace": {
            "frames": [
              {
                "function": "<module>",
                "module": "__main__",
                "filename": "<string>",
                "abs_path": "/usr/src/getsentry/<string>",
                "lineno": 1,
                "context_line": "from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=12, pipe_handle=28)",
                "in_app": true,
                "vars": {
                  "__annotations__": {},
                  "__builtins__": "<module 'builtins' (built-in)>",
                  "__doc__": "None",
                  "__loader__": "<class '_frozen_importlib.BuiltinImporter'>",
                  "__name__": "'__main__'",
                  "__package__": "None",
                  "__spec__": "None",
                  "spawn_main": "<function spawn_main at 0x7dafa73009a0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "spawn_main",
                "module": "multiprocessing.spawn",
                "filename": "multiprocessing/spawn.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/spawn.py",
                "lineno": 122,
                "pre_context": [
                  "    else:",
                  "        from . import resource_tracker",
                  "        resource_tracker._resource_tracker._fd = tracker_fd",
                  "        fd = pipe_handle",
                  "        parent_sentinel = os.dup(pipe_handle)"
                ],
                "context_line": "    exitcode = _main(fd, parent_sentinel)",
                "post_context": [
                  "    sys.exit(exitcode)",
                  "",
                  "",
                  "def _main(fd, parent_sentinel):",
                  "    with os.fdopen(fd, 'rb', closefd=True) as from_parent:"
                ],
                "in_app": false,
                "vars": {
                  "fd": "28",
                  "parent_pid": "None",
                  "parent_sentinel": "3",
                  "pipe_handle": "28",
                  "resource_tracker": "<module 'multiprocessing.resource_tracker' from '/usr/local/lib/python3.13/multiprocessing/resource_tracker.py'>",
                  "tracker_fd": "12"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_main",
                "module": "multiprocessing.spawn",
                "filename": "multiprocessing/spawn.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/spawn.py",
                "lineno": 135,
                "pre_context": [
                  "            preparation_data = reduction.pickle.load(from_parent)",
                  "            prepare(preparation_data)",
                  "            self = reduction.pickle.load(from_parent)",
                  "        finally:",
                  "            del process.current_process()._inheriting"
                ],
                "context_line": "    return self._bootstrap(parent_sentinel)",
                "post_context": [
                  "",
                  "",
                  "def _check_not_importing_main():",
                  "    if getattr(process.current_process(), '_inheriting', False):",
                  "        raise RuntimeError('''"
                ],
                "in_app": false,
                "vars": {
                  "fd": "28",
                  "from_parent": "<_io.BufferedReader name=28>",
                  "parent_sentinel": "3",
                  "preparation_data": {
                    "authkey": "[Filtered]",
                    "dir": "'/usr/src/getsentry'",
                    "init_main_from_name": "'sentry.__main__'",
                    "log_to_stderr": "False",
                    "name": "'SpawnPoolWorker-6'",
                    "orig_dir": "'/usr/src/getsentry'",
                    "start_method": "'fork'",
                    "sys_argv": [
                      "'/usr/src/sentry/src/sentry/__main__.py'",
                      "'run'",
                      "'consumer'",
                      "'events-subscription-results'",
                      "'--consumer-group=sentry-events-subscription-results-consumers'",
                      "'--'",
                      "'--processes=8'"
                    ],
                    "sys_path": [
                      "'/usr/src/getsentry'",
                      "'/usr/src/sentry/src'",
                      "'/usr/src/getsentry'",
                      "'/usr/src/sentry/src'",
                      "'/usr/src/getsentry'",
                      "'/usr/local/lib/python313.zip'",
                      "'/usr/local/lib/python3.13'",
                      "'/usr/local/lib/python3.13/lib-dynload'",
                      "'/.venv/lib/python3.13/site-packages'",
                      "'/usr/src/sentry/src'"
                    ]
                  },
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_bootstrap",
                "module": "multiprocessing.process",
                "filename": "multiprocessing/process.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/process.py",
                "lineno": 313,
                "pre_context": [
                  "            finally:",
                  "                # delay finalization of the old process object until after",
                  "                # _run_after_forkers() is executed",
                  "                del old_process",
                  "            util.info('child process calling self.run()')"
                ],
                "context_line": "            self.run()",
                "post_context": [
                  "            exitcode = 0",
                  "        except SystemExit as e:",
                  "            if e.code is None:",
                  "                exitcode = 0",
                  "            elif isinstance(e.code, int):"
                ],
                "in_app": false,
                "vars": {
                  "context": "<module 'multiprocessing.context' from '/usr/local/lib/python3.13/multiprocessing/context.py'>",
                  "parent_sentinel": "3",
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>",
                  "util": "<module 'multiprocessing.util' from '/usr/local/lib/python3.13/multiprocessing/util.py'>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "run",
                "module": "multiprocessing.process",
                "filename": "multiprocessing/process.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/process.py",
                "lineno": 108,
                "pre_context": [
                  "    def run(self):",
                  "        '''",
                  "        Method to be run in sub-process; can be overridden in sub-class",
                  "        '''",
                  "        if self._target:"
                ],
                "context_line": "            self._target(*self._args, **self._kwargs)",
                "post_context": [
                  "",
                  "    def start(self):",
                  "        '''",
                  "        Start child process",
                  "        '''"
                ],
                "in_app": false,
                "vars": {
                  "self": "<SpawnProcess name='SpawnPoolWorker-6' parent=20 started daemon>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "worker",
                "module": "multiprocessing.pool",
                "filename": "multiprocessing/pool.py",
                "abs_path": "/usr/local/lib/python3.13/multiprocessing/pool.py",
                "lineno": 125,
                "pre_context": [
                  "            util.debug('worker got sentinel -- exiting')",
                  "            break",
                  "",
                  "        job, i, func, args, kwds = task",
                  "        try:"
                ],
                "context_line": "            result = (True, func(*args, **kwds))",
                "post_context": [
                  "        except Exception as e:",
                  "            if wrap_exception and func is not _helper_reraises_exception:",
                  "                e = ExceptionWithTraceback(e, e.__traceback__)",
                  "            result = (False, e)",
                  "        try:"
                ],
                "in_app": false,
                "vars": {
                  "completed": "49",
                  "get": "<bound method SimpleQueue.get of <multiprocessing.queues.SimpleQueue object at 0x7dafa7109010>>",
                  "initargs": [],
                  "initializer": "functools.partial(<function parallel_worker_initializer at 0x7dafa6e8dee0>, functools.partial(<function _initialize_arroyo_subprocess at 0x7dafa51df880>, initializer=None, tags={'consumer_group': 'sentry-events-subscription-results-consumers'}))",
                  "inqueue": "<multiprocessing.queues.SimpleQueue object at 0x7dafa7109010>",
                  "maxtasks": "None",
                  "outqueue": "<multiprocessing.queues.SimpleQueue object at 0x7dafa732a850>",
                  "put": "<bound method SimpleQueue.put of <multiprocessing.queues.SimpleQueue object at 0x7dafa732a850>>",
                  "task": [
                    "405",
                    "0",
                    "<function parallel_run_task_worker_apply at 0x7dafa6efbe20>",
                    [
                      "functools.partial(<function process_message at 0x7daf20673ec0>, <Dataset.Events: 'events'>, 'events-subscription-results', 'events-subscription-results')",
                      "<MessageBatch: 100 items, 52687 bytes>",
                      "SharedMemory('psm_7d98df1d', size=16777216)"
                    ],
                    {}
                  ],
                  "wrap_exception": "True"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "parallel_run_task_worker_apply",
                "module": "arroyo.processing.strategies.run_task_with_multiprocessing",
                "filename": "arroyo/processing/strategies/run_task_with_multiprocessing.py",
                "abs_path": "/.venv/lib/python3.13/site-packages/arroyo/processing/strategies/run_task_with_multiprocessing.py",
                "lineno": 252,
                "pre_context": [
                  "",
                  "        payload: Union[InvalidMessage, Message[Union[FilteredPayload, TResult]]]",
                  "",
                  "        try:",
                  "            payload = message.replace("
                ],
                "context_line": "                function(cast(Message[TStrategyPayload], message))",
                "post_context": [
                  "            )",
                  "        except InvalidMessage as e:",
                  "            payload = e",
                  "        except Exception:",
                  "            # The remote traceback thrown when retrieving the result from the"
                ],
                "in_app": false,
                "vars": {
                  "function": "functools.partial(<function process_message at 0x7daf20673ec0>, <Dataset.Events: 'events'>, 'events-subscription-results', 'events-subscription-results')",
                  "input_batch": "<MessageBatch: 100 items, 52687 bytes>",
                  "message": "Message({Partition(topic=Topic(name='events-subscription-results'), index=14): 2147953216})",
                  "next_index_to_process": "70",
                  "output_block": "SharedMemory('psm_7d98df1d', size=16777216)",
                  "payload": "Message({Partition(topic=Topic(name='events-subscription-results'), index=15): 2145299440})",
                  "start_index": "0",
                  "valid_messages_transformed": "<MessageBatch: 70 items, 0 bytes>"
                },
                "data": { "client_in_app": false }
              },
              {
                "function": "process_message",
                "module": "sentry.snuba.query_subscriptions.run",
                "filename": "sentry/snuba/query_subscriptions/run.py",
                "abs_path": "/usr/src/sentry/src/sentry/snuba/query_subscriptions/run.py",
                "lineno": 94,
                "pre_context": [
                  "        assert isinstance(value, BrokerValue)",
                  "        offset = value.offset",
                  "        partition = value.partition.index",
                  "        message_value = value.payload.value",
                  "        try:"
                ],
                "context_line": "            handle_message(",
                "post_context": [
                  "                message_value,",
                  "                offset,",
                  "                partition,",
                  "                topic,",
                  "                dataset.value,"
                ],
                "in_app": true,
                "vars": {
                  "dataset": "<Dataset.Events: 'events'>",
                  "handle_message": "<function handle_message at 0x7daf2a3eb9c0>",
                  "logical_topic": "'events-subscription-results'",
                  "message": "Message({Partition(topic=Topic(name='events-subscription-results'), index=14): 2147953216})",
                  "message_value": "b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}'",
                  "metrics": "<module 'sentry.utils.metrics' from '/usr/src/sentry/src/sentry/utils/metrics.py'>",
                  "offset": "2147953215",
                  "partition": "14",
                  "topic": "'events-subscription-results'",
                  "value": "BrokerValue(_BrokerValue__payload=KafkaPayload(key=b'60/7285b974098011efb28c12598142fbc4', value=b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}', headers=[]), partition=Partition(topic=Topic(name='events-subscription-results'), index=14), offset=2147953215, timestamp=datetime.datetime(2025, 7, 2, 16, 43, 0, 874000))"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "handle_message",
                "module": "sentry.snuba.query_subscriptions.consumer",
                "filename": "sentry/snuba/query_subscriptions/consumer.py",
                "abs_path": "/usr/src/sentry/src/sentry/snuba/query_subscriptions/consumer.py",
                "lineno": 176,
                "pre_context": [
                  "            span.set_attribute(\"subscription_resolution\", subscription.snuba_query.resolution)",
                  "            span.set_attribute(\"message_offset\", message_offset)",
                  "            span.set_attribute(\"message_partition\", message_partition)",
                  "            span.set_attribute(\"message_value\", message_value)",
                  ""
                ],
                "context_line": "            callback(contents, subscription)",
                "post_context": [
                  "",
                  "",
                  "class InvalidMessageError(Exception):",
                  "    pass",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "callback": "<function handle_snuba_query_update at 0x7daf2a3eba60>",
                  "contents": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  },
                  "dataset": "'events'",
                  "jsoncodec": "<sentry_kafka_schemas.codecs.json.JsonCodec object at 0x7daf20675010>",
                  "message_offset": "2147953215",
                  "message_partition": "14",
                  "message_value": "b'{\"version\": 3, \"payload\": {\"subscription_id\": \"60/7285b974098011efb28c12598142fbc4\", \"request\": {\"query\": \"MATCH (events) SELECT count() AS `count` WHERE (type = \\'error\\' AND group_id = 5059481984) AND project_id IN array([Filtered]) AND environment = \\'production\\'\", \"tenant_ids\": {\"referrer\": \"subscriptions_executor\", \"organization_id\": 1}}, \"result\": {\"data\": [{\"count\": 0}], \"meta\": [{\"name\": \"count\", \"type\": \"UInt64\"}]}, \"timestamp\": \"2025-07-02T16:42:00\", \"entity\": \"events\"}}'",
                  "scope": "<PotelScope id=0x7daf206c23f0 name=None type=ScopeType.ISOLATION>",
                  "subscription": "<QuerySubscription at 0x7daf185d8a50: id=191608>",
                  "topic": "'events-subscription-results'"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "handle_snuba_query_update",
                "module": "sentry.incidents.tasks",
                "filename": "sentry/incidents/tasks.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/tasks.py",
                "lineno": 41,
                "pre_context": [
                  "    \"\"\"",
                  "    from sentry.incidents.subscription_processor import SubscriptionProcessor",
                  "",
                  "    # noinspection SpellCheckingInspection",
                  "    with metrics.timer(\"incidents.subscription_procesor.process_update\"):"
                ],
                "context_line": "        SubscriptionProcessor(subscription).process_update(subscription_update)",
                "post_context": [
                  "",
                  "",
                  "@instrumented_task(",
                  "    name=\"sentry.incidents.tasks.handle_trigger_action\",",
                  "    queue=\"incidents\","
                ],
                "in_app": true,
                "vars": {
                  "SubscriptionProcessor": "<class 'sentry.incidents.subscription_processor.SubscriptionProcessor'>",
                  "subscription": "<QuerySubscription at 0x7daf185d8a50: id=191608>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "process_update",
                "module": "sentry.incidents.subscription_processor",
                "filename": "sentry/incidents/subscription_processor.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/subscription_processor.py",
                "lineno": 370,
                "pre_context": [
                  "                )",
                  "",
                  "        else:",
                  "            comparison_delta = self.alert_rule.comparison_delta",
                  ""
                ],
                "context_line": "        aggregation_value = self.get_aggregation_value(subscription_update, comparison_delta)",
                "post_context": [
                  "",
                  "        if aggregation_value is not None:",
                  "            if (",
                  "                has_metric_alert_processing",
                  "                and not self.alert_rule.detection_type == AlertRuleDetectionType.DYNAMIC"
                ],
                "in_app": true,
                "vars": {
                  "comparison_delta": "604800",
                  "dataset": "'events'",
                  "detector": "None",
                  "has_anomaly_detection": "True",
                  "has_metric_alert_processing": "False",
                  "organization": "<Organization at 0x7daf185d9130: id=1192616, owner_id=None, name='Boost Studios', slug='rabbithole'>",
                  "self": "<sentry.incidents.subscription_processor.SubscriptionProcessor object at 0x7daf181ec0f0>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_aggregation_value",
                "module": "sentry.incidents.subscription_processor",
                "filename": "sentry/incidents/subscription_processor.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/subscription_processor.py",
                "lineno": 245,
                "pre_context": [
                  "        if self.subscription.snuba_query.dataset == Dataset.Metrics.value:",
                  "            aggregation_value = self.get_crash_rate_alert_metrics_aggregation_value(",
                  "                subscription_update",
                  "            )",
                  "        else:"
                ],
                "context_line": "            aggregation_value = get_comparison_aggregation_value(",
                "post_context": [
                  "                subscription_update=subscription_update,",
                  "                snuba_query=self.subscription.snuba_query,",
                  "                organization_id=self.subscription.project.organization.id,",
                  "                project_ids=[self.subscription.project_id],",
                  "                comparison_delta=comparison_delta,"
                ],
                "in_app": true,
                "vars": {
                  "comparison_delta": "604800",
                  "self": "<sentry.incidents.subscription_processor.SubscriptionProcessor object at 0x7daf181ec0f0>",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_comparison_aggregation_value",
                "module": "sentry.incidents.utils.process_update_helpers",
                "filename": "sentry/incidents/utils/process_update_helpers.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py",
                "lineno": 204,
                "pre_context": [
                  "            end,",
                  "            alert_rule_id,",
                  "        )",
                  "",
                  "    else:"
                ],
                "context_line": "        comparison_aggregate = get_aggregation_value(",
                "post_context": [
                  "            entity_subscription,",
                  "            subscription_update,",
                  "            snuba_query,",
                  "            project_ids,",
                  "            organization_id,"
                ],
                "in_app": true,
                "vars": {
                  "aggregation_value": "0",
                  "alert_rule_id": "226731",
                  "comparison_delta": "604800",
                  "delta": "datetime.timedelta(days=7)",
                  "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                  "organization_id": "1192616",
                  "project_ids": ["[Filtered]"],
                  "snuba_query": "<SnubaQuery at 0x7daf1857fa70: id=248822>",
                  "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "get_aggregation_value",
                "module": "sentry.incidents.utils.process_update_helpers",
                "filename": "sentry/incidents/utils/process_update_helpers.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py",
                "lineno": 156,
                "pre_context": [
                  "        query_builder.limit = Limit(1)",
                  "        results = query_builder.run_query(referrer=\"subscription_processor.comparison_query\")",
                  "        comparison_aggregate = list(results[\"data\"][0].values())[0]",
                  "",
                  "    except Exception:"
                ],
                "context_line": "        logger.exception(",
                "post_context": [
                  "            \"Failed to run comparison query\",",
                  "            extra={",
                  "                \"alert_rule_id\": alert_rule_id,",
                  "                \"subscription_id\": subscription_update.get(\"subscription_id\"),",
                  "                \"organization_id\": organization_id,"
                ],
                "in_app": true,
                "vars": {
                  "alert_rule_id": "226731",
                  "comparison_aggregate": "None",
                  "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                  "entity_subscription": "EventsEntitySubscription(query_type=<Type.ERROR: 0>, dataset=<Dataset.Events: 'events'>)",
                  "organization_id": "1192616",
                  "project_ids": ["[Filtered]"],
                  "snuba_query": "<SnubaQuery at 0x7daf1857fa70: id=248822>",
                  "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "exception",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1554,
                "pre_context": [
                  "",
                  "    def exception(self, msg, *args, exc_info=True, **kwargs):",
                  "        \"\"\"",
                  "        Convenience method for logging an ERROR with exception information.",
                  "        \"\"\""
                ],
                "context_line": "        self.error(msg, *args, exc_info=exc_info, **kwargs)",
                "post_context": [
                  "",
                  "    def critical(self, msg, *args, **kwargs):",
                  "        \"\"\"",
                  "        Log 'msg % args' with severity 'CRITICAL'.",
                  ""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "exc_info": "True",
                  "kwargs": {
                    "extra": {
                      "alert_rule_id": "226731",
                      "organization_id": "1192616",
                      "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                    }
                  },
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "error",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1548,
                "pre_context": [
                  "        a true value, e.g.",
                  "",
                  "        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=True)",
                  "        \"\"\"",
                  "        if self.isEnabledFor(ERROR):"
                ],
                "context_line": "            self._log(ERROR, msg, args, **kwargs)",
                "post_context": [
                  "",
                  "    def exception(self, msg, *args, exc_info=True, **kwargs):",
                  "        \"\"\"",
                  "        Convenience method for logging an ERROR with exception information.",
                  "        \"\"\""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "kwargs": {
                    "exc_info": "True",
                    "extra": {
                      "alert_rule_id": "226731",
                      "organization_id": "1192616",
                      "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                    }
                  },
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "_log",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1664,
                "pre_context": [
                  "                exc_info = (type(exc_info), exc_info, exc_info.__traceback__)",
                  "            elif not isinstance(exc_info, tuple):",
                  "                exc_info = sys.exc_info()",
                  "        record = self.makeRecord(self.name, level, fn, lno, msg, args,",
                  "                                 exc_info, func, extra, sinfo)"
                ],
                "context_line": "        self.handle(record)",
                "post_context": [
                  "",
                  "    def handle(self, record):",
                  "        \"\"\"",
                  "        Call the handlers for the specified record.",
                  ""
                ],
                "in_app": false,
                "vars": {
                  "args": [],
                  "exc_info": [
                    "<class 'sentry.exceptions.InvalidSearchQuery'>",
                    "InvalidSearchQuery(\"Invalid value '['BOOST-INBOX-4K']' for 'issue:' filter\")",
                    "<traceback object at 0x7daf18479440>"
                  ],
                  "extra": {
                    "alert_rule_id": "226731",
                    "organization_id": "1192616",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'"
                  },
                  "fn": "'/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py'",
                  "level": "40",
                  "msg": "'Failed to run comparison query'",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>",
                  "sinfo": "None",
                  "stack_info": "False",
                  "stacklevel": "1"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "handle",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1680,
                "pre_context": [
                  "        maybe_record = self.filter(record)",
                  "        if not maybe_record:",
                  "            return",
                  "        if isinstance(maybe_record, LogRecord):",
                  "            record = maybe_record"
                ],
                "context_line": "        self.callHandlers(record)",
                "post_context": [
                  "",
                  "    def addHandler(self, hdlr):",
                  "        \"\"\"",
                  "        Add the specified handler to this logger.",
                  "        \"\"\""
                ],
                "in_app": false,
                "vars": {
                  "maybe_record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "callHandlers",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1736,
                "pre_context": [
                  "        found = 0",
                  "        while c:",
                  "            for hdlr in c.handlers:",
                  "                found = found + 1",
                  "                if record.levelno >= hdlr.level:"
                ],
                "context_line": "                    hdlr.handle(record)",
                "post_context": [
                  "            if not c.propagate:",
                  "                c = None    #break out",
                  "            else:",
                  "                c = c.parent",
                  "        if (found == 0):"
                ],
                "in_app": false,
                "vars": {
                  "c": "<RootLogger root (INFO)>",
                  "found": "2",
                  "hdlr": "<EventHandler (ERROR)>",
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<Logger sentry.incidents.utils.process_update_helpers (INFO)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "handle",
                "module": "logging",
                "filename": "__init__.py",
                "abs_path": "/usr/local/lib/python3.13/logging/__init__.py",
                "lineno": 1026,
                "pre_context": [
                  "        rv = self.filter(record)",
                  "        if isinstance(rv, LogRecord):",
                  "            record = rv",
                  "        if rv:",
                  "            with self.lock:"
                ],
                "context_line": "                self.emit(record)",
                "post_context": [
                  "        return rv",
                  "",
                  "    def setFormatter(self, fmt):",
                  "        \"\"\"",
                  "        Set the formatter for this handler."
                ],
                "in_app": false,
                "vars": {
                  "record": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "rv": "<LogRecord: sentry.incidents.utils.process_update_helpers, 40, /usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py, 156, \"Failed to run comparison query\">",
                  "self": "<EventHandler (ERROR)>"
                },
                "data": { "orig_in_app": -1 }
              },
              {
                "function": "get_aggregation_value",
                "module": "sentry.incidents.utils.process_update_helpers",
                "filename": "sentry/incidents/utils/process_update_helpers.py",
                "abs_path": "/usr/src/sentry/src/sentry/incidents/utils/process_update_helpers.py",
                "lineno": 133,
                "pre_context": [
                  "    alert_rule_id: int | None = None,",
                  ") -> float | None:",
                  "    comparison_aggregate: None | float = None",
                  "    try:",
                  "        # TODO: determine whether we need to include the subscription query_extra here"
                ],
                "context_line": "        query_builder = entity_subscription.build_query_builder(",
                "post_context": [
                  "            query=snuba_query.query,",
                  "            project_ids=project_ids,",
                  "            environment=snuba_query.environment,",
                  "            params={",
                  "                \"organization_id\": organization_id,"
                ],
                "in_app": true,
                "vars": {
                  "alert_rule_id": "226731",
                  "comparison_aggregate": "None",
                  "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                  "entity_subscription": "EventsEntitySubscription(query_type=<Type.ERROR: 0>, dataset=<Dataset.Events: 'events'>)",
                  "organization_id": "1192616",
                  "project_ids": ["[Filtered]"],
                  "snuba_query": "<SnubaQuery at 0x7daf1857fa70: id=248822>",
                  "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)",
                  "subscription_update": {
                    "entity": "'events'",
                    "subscription_id": "'60/7285b974098011efb28c12598142fbc4'",
                    "timestamp": "datetime.datetime(2025, 7, 2, 16, 42, tzinfo=datetime.timezone.utc)",
                    "values": {
                      "data": ["{\"count\":\"0\"}"],
                      "meta": ["{\"name\":\"'count'\",\"type\":\"'UInt64'\"}"]
                    }
                  }
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "build_query_builder",
                "module": "sentry.snuba.entity_subscription",
                "filename": "sentry/snuba/entity_subscription.py",
                "abs_path": "/usr/src/sentry/src/sentry/snuba/entity_subscription.py",
                "lineno": 202,
                "pre_context": [
                  "            from sentry.snuba.errors import PARSER_CONFIG_OVERRIDES",
                  "",
                  "            query_builder_cls = ErrorsQueryBuilder",
                  "            parser_config_overrides.update(PARSER_CONFIG_OVERRIDES)",
                  ""
                ],
                "context_line": "        return query_builder_cls(",
                "post_context": [
                  "            dataset=Dataset(self.dataset.value),",
                  "            query=query,",
                  "            selected_columns=[self.aggregate],",
                  "            params=params,",
                  "            offset=None,"
                ],
                "in_app": true,
                "vars": {
                  "ErrorsQueryBuilder": "<class 'sentry.search.events.builder.errors.ErrorsQueryBuilder'>",
                  "PARSER_CONFIG_OVERRIDES": {
                    "is_filter_translation": {
                      "archived": ["'status'", "2"],
                      "ignored": ["'status'", "2"],
                      "muted": ["'status'", "2"],
                      "reprocessing": ["'status'", "6"],
                      "resolved": ["'status'", "1"],
                      "unresolved": ["'status'", "0"]
                    }
                  },
                  "environment": "<Environment at 0x7daf18171a20: id=2570271, organization_id=1192616, name='production'>",
                  "params": {
                    "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                    "environment": "'production'",
                    "organization_id": "1192616",
                    "project_id": ["[Filtered]"],
                    "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)"
                  },
                  "parser_config_overrides": {
                    "blocked_keys": [
                      "'time'",
                      "'timestamp.to_day'",
                      "'end'",
                      "'timestamp'",
                      "'timestamp.to_hour'",
                      "'start'",
                      "'last_seen()'"
                    ],
                    "is_filter_translation": {
                      "archived": ["'status'", "2"],
                      "ignored": ["'status'", "2"],
                      "muted": ["'status'", "2"],
                      "reprocessing": ["'status'", "6"],
                      "resolved": ["'status'", "1"],
                      "unresolved": ["'status'", "0"]
                    }
                  },
                  "project_ids": ["[Filtered]"],
                  "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                  "query_builder_cls": "<class 'sentry.search.events.builder.errors.ErrorsQueryBuilder'>",
                  "self": "EventsEntitySubscription(query_type=<Type.ERROR: 0>, dataset=<Dataset.Events: 'events'>)",
                  "skip_field_validation_for_entity_subscription_deletion": "False"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "__init__",
                "module": "sentry.search.events.builder.errors",
                "filename": "sentry/search/events/builder/errors.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/errors.py",
                "lineno": 37,
                "pre_context": [
                  "",
                  "class ErrorsQueryBuilderMixin:",
                  "    def __init__(self, *args, **kwargs):",
                  "        self.match = None",
                  "        self.entities = set()"
                ],
                "context_line": "        super().__init__(*args, **kwargs)",
                "post_context": [
                  "",
                  "    def parse_query(self, query: str | None) -> ParsedTerms:",
                  "        parsed_terms = super().parse_query(query)",
                  "        parsed_terms = convert_query_values(",
                  "            parsed_terms,"
                ],
                "in_app": true,
                "vars": {
                  "__class__": "<class 'sentry.search.events.builder.errors.ErrorsQueryBuilderMixin'>",
                  "args": [],
                  "kwargs": {
                    "config": "QueryBuilderConfig(auto_fields=False, auto_aggregations=False, use_aggregate_conditions=False, functions_acl=None, equation_config=None, skip_time_conditions=True, parser_config_overrides={'blocked_keys': {'time', 'timestamp.to_day', 'end', 'timestamp', 'timestamp.to_hour', 'start', 'last_seen()'}, 'is_filter_translation': {'resolved': ('status', 1), 'unresolved': ('status', 0), 'ignored': ('status', 2), 'archived': ('status', 2), 'muted': ('status', 2), 'reprocessing': ('status', 6)}}, has_metrics=False, transform_alias_to_input_format=False, use_metrics_layer=False, skip_tag_resolution=False, on_demand_metrics_enabled=False, on_demand_metrics_type=None, skip_field_validation_for_entity_subscription_deletion=False, allow_metric_aggregates=False, insights_metrics_override_metric_layer=False, use_entity_prefix_for_fields=True)",
                    "dataset": "<Dataset.Events: 'events'>",
                    "limit": "None",
                    "offset": "None",
                    "params": {
                      "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                      "environment": "'production'",
                      "organization_id": "1192616",
                      "project_id": ["[Filtered]"],
                      "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)"
                    },
                    "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                    "selected_columns": ["'count()'"]
                  },
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "__init__",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 283,
                "pre_context": [
                  "        self.config = self.load_config()",
                  "        self.parse_config()",
                  "",
                  "        self.start: datetime | None = None",
                  "        self.end: datetime | None = None"
                ],
                "context_line": "        self.resolve_query(",
                "post_context": [
                  "            query=query,",
                  "            selected_columns=selected_columns,",
                  "            groupby_columns=groupby_columns,",
                  "            equations=equations,",
                  "            orderby=orderby,"
                ],
                "in_app": true,
                "vars": {
                  "config": "QueryBuilderConfig(auto_fields=False, auto_aggregations=False, use_aggregate_conditions=False, functions_acl=None, equation_config=None, skip_time_conditions=True, parser_config_overrides={'blocked_keys': {'time', 'timestamp.to_day', 'end', 'timestamp', 'timestamp.to_hour', 'start', 'last_seen()'}, 'is_filter_translation': {'resolved': ('status', 1), 'unresolved': ('status', 0), 'ignored': ('status', 2), 'archived': ('status', 2), 'muted': ('status', 2), 'reprocessing': ('status', 6)}}, has_metrics=False, transform_alias_to_input_format=False, use_metrics_layer=False, skip_tag_resolution=False, on_demand_metrics_enabled=False, on_demand_metrics_type=None, skip_field_validation_for_entity_subscription_deletion=False, allow_metric_aggregates=False, insights_metrics_override_metric_layer=False, use_entity_prefix_for_fields=True)",
                  "dataset": "<Dataset.Events: 'events'>",
                  "equations": "None",
                  "groupby_columns": "None",
                  "orderby": "None",
                  "params": {
                    "end": "datetime.datetime(2025, 6, 25, 16, 42, tzinfo=datetime.timezone.utc)",
                    "environment": "'production'",
                    "organization_id": "1192616",
                    "project_id": ["[Filtered]"],
                    "start": "datetime.datetime(2025, 6, 25, 15, 42, tzinfo=datetime.timezone.utc)"
                  },
                  "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                  "selected_columns": ["'count()'"],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "snuba_params": "None"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_query",
                "module": "sentry.search.events.builder.errors",
                "filename": "sentry/search/events/builder/errors.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/errors.py",
                "lineno": 81,
                "pre_context": [
                  "        selected_columns: list[str] | None = None,",
                  "        groupby_columns: list[str] | None = None,",
                  "        equations: list[str] | None = None,",
                  "        orderby: list[str] | str | None = None,",
                  "    ) -> None:"
                ],
                "context_line": "        super().resolve_query(query, selected_columns, groupby_columns, equations, orderby)",
                "post_context": [
                  "        self.resolve_match()",
                  "",
                  "    def aliased_column(self, name: str) -> SelectType:",
                  "        aliased_col: SelectType = super().aliased_column(name)",
                  "        if isinstance(aliased_col, AliasedExpression):"
                ],
                "in_app": true,
                "vars": {
                  "__class__": "<class 'sentry.search.events.builder.errors.ErrorsQueryBuilderMixin'>",
                  "equations": "None",
                  "groupby_columns": "None",
                  "orderby": "None",
                  "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                  "selected_columns": ["'count()'"],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_query",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 336,
                "pre_context": [
                  "        with sentry_sdk.start_span(op=\"QueryBuilder\", name=\"resolve_query\"):",
                  "            with sentry_sdk.start_span(op=\"QueryBuilder\", name=\"resolve_time_conditions\"):",
                  "                # Has to be done early, since other conditions depend on start and end",
                  "                self.resolve_time_conditions()",
                  "            with sentry_sdk.start_span(op=\"QueryBuilder\", name=\"resolve_conditions\"):"
                ],
                "context_line": "                self.where, self.having = self.resolve_conditions(query)",
                "post_context": [
                  "            with sentry_sdk.start_span(op=\"QueryBuilder\", name=\"resolve_params\"):",
                  "                # params depends on parse_query, and conditions being resolved first since there may be projects in conditions",
                  "                self.where += self.resolve_params()",
                  "            with sentry_sdk.start_span(op=\"QueryBuilder\", name=\"resolve_columns\"):",
                  "                self.columns = self.resolve_select(selected_columns, equations)"
                ],
                "in_app": true,
                "vars": {
                  "equations": "None",
                  "groupby_columns": "None",
                  "orderby": "None",
                  "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                  "selected_columns": ["'count()'"],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_conditions",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 431,
                "pre_context": [
                  "        if any(",
                  "            isinstance(term, event_search.ParenExpression)",
                  "            or event_search.SearchBoolean.is_operator(term)",
                  "            for term in parsed_terms",
                  "        ):"
                ],
                "context_line": "            where, having = self.resolve_boolean_conditions(parsed_terms)",
                "post_context": [
                  "        else:",
                  "            where = self.resolve_where(parsed_terms)",
                  "            having = self.resolve_having(parsed_terms)",
                  "",
                  "        sentry_sdk.set_tag(\"query.has_having_conditions\", len(having) > 0)"
                ],
                "in_app": true,
                "vars": {
                  "parsed_terms": [
                    [
                      [
                        "[\"SearchKey(name='event.type')\",\"'='\",\"SearchValue(raw_value='error', use_raw_value=False)\"]"
                      ]
                    ],
                    "'AND'",
                    [
                      [
                        "[\"SearchKey(name='issue')\",\"'='\",\"SearchValue(raw_value='BOOST-INBOX-4K', use_raw_value=False)\"]"
                      ]
                    ]
                  ],
                  "query": "'(event.type:error) AND (issue:BOOST-INBOX-4K)'",
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_boolean_conditions",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 493,
                "pre_context": [
                  "        except Exception:",
                  "            lhs, rhs = terms[:1], terms[1:]",
                  "            operator = And",
                  "",
                  "        lhs_where, lhs_having = self.resolve_boolean_conditions(lhs)"
                ],
                "context_line": "        rhs_where, rhs_having = self.resolve_boolean_conditions(rhs)",
                "post_context": [
                  "",
                  "        is_where_condition: Callable[[list[WhereType]], bool] = lambda x: bool(",
                  "            x and len(x) == 1 and isinstance(x[0], Condition)",
                  "        )",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "index": "None",
                  "lhs": [
                    [
                      [
                        "[\"SearchKey(name='event.type')\",\"'='\",\"SearchValue(raw_value='error', use_raw_value=False)\"]"
                      ]
                    ]
                  ],
                  "lhs_where": [
                    "Condition(lhs=Column(name='type', entity=Entity('events', alias='events'), subscriptable=None, key=None), op=<Op.EQ: '='>, rhs='error')"
                  ],
                  "new_terms": [
                    [
                      [
                        "[\"SearchKey(name='event.type')\",\"'='\",\"SearchValue(raw_value='error', use_raw_value=False)\"]"
                      ]
                    ],
                    [
                      [
                        "[\"SearchKey(name='issue')\",\"'='\",\"SearchValue(raw_value='BOOST-INBOX-4K', use_raw_value=False)\"]"
                      ]
                    ]
                  ],
                  "operator": "<class 'snuba_sdk.conditions.And'>",
                  "previous_term": [
                    [["[\"'issue'\"]", "'='", "[\"'BOOST-INBOX-4K'\",\"False\"]"]]
                  ],
                  "rhs": [
                    [
                      [
                        "[\"SearchKey(name='issue')\",\"'='\",\"SearchValue(raw_value='BOOST-INBOX-4K', use_raw_value=False)\"]"
                      ]
                    ]
                  ],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "term": [
                    [["[\"'issue'\"]", "'='", "[\"'BOOST-INBOX-4K'\",\"False\"]"]]
                  ],
                  "terms": [
                    [
                      [
                        "[\"SearchKey(name='event.type')\",\"'='\",\"SearchValue(raw_value='error', use_raw_value=False)\"]"
                      ]
                    ],
                    [
                      [
                        "[\"SearchKey(name='issue')\",\"'='\",\"SearchValue(raw_value='BOOST-INBOX-4K', use_raw_value=False)\"]"
                      ]
                    ]
                  ]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_boolean_conditions",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 445,
                "pre_context": [
                  "",
                  "    def resolve_boolean_conditions(",
                  "        self, terms: event_filter.ParsedTerms",
                  "    ) -> tuple[list[WhereType], list[WhereType]]:",
                  "        if len(terms) == 1:"
                ],
                "context_line": "            return self.resolve_boolean_condition(terms[0])",
                "post_context": [
                  "",
                  "        # Filter out any ANDs since we can assume anything without an OR is an AND. Also do some",
                  "        # basic sanitization of the query: can't have two operators next to each other, and can't",
                  "        # start or end a query with an operator.",
                  "        previous_term: event_filter.ParsedTerm | None = None"
                ],
                "in_app": true,
                "vars": {
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "terms": [
                    [
                      [
                        "[\"SearchKey(name='issue')\",\"'='\",\"SearchValue(raw_value='BOOST-INBOX-4K', use_raw_value=False)\"]"
                      ]
                    ]
                  ]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_boolean_condition",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 530,
                "pre_context": [
                  "",
                  "    def resolve_boolean_condition(",
                  "        self, term: event_filter.ParsedTerm",
                  "    ) -> tuple[list[WhereType], list[WhereType]]:",
                  "        if isinstance(term, event_search.ParenExpression):"
                ],
                "context_line": "            return self.resolve_boolean_conditions(term.children)",
                "post_context": [
                  "",
                  "        where, having = [], []",
                  "",
                  "        if isinstance(term, event_search.SearchFilter):",
                  "            where = self.resolve_where([term])"
                ],
                "in_app": true,
                "vars": {
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "term": [
                    [["[\"'issue'\"]", "'='", "[\"'BOOST-INBOX-4K'\",\"False\"]"]]
                  ]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_boolean_conditions",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 445,
                "pre_context": [
                  "",
                  "    def resolve_boolean_conditions(",
                  "        self, terms: event_filter.ParsedTerms",
                  "    ) -> tuple[list[WhereType], list[WhereType]]:",
                  "        if len(terms) == 1:"
                ],
                "context_line": "            return self.resolve_boolean_condition(terms[0])",
                "post_context": [
                  "",
                  "        # Filter out any ANDs since we can assume anything without an OR is an AND. Also do some",
                  "        # basic sanitization of the query: can't have two operators next to each other, and can't",
                  "        # start or end a query with an operator.",
                  "        previous_term: event_filter.ParsedTerm | None = None"
                ],
                "in_app": true,
                "vars": {
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "terms": [[["'issue'"], "'='", ["'BOOST-INBOX-4K'", "False"]]]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_boolean_condition",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 535,
                "pre_context": [
                  "            return self.resolve_boolean_conditions(term.children)",
                  "",
                  "        where, having = [], []",
                  "",
                  "        if isinstance(term, event_search.SearchFilter):"
                ],
                "context_line": "            where = self.resolve_where([term])",
                "post_context": [
                  "        elif isinstance(term, event_search.AggregateFilter):",
                  "            having = self.resolve_having([term])",
                  "",
                  "        return where, having",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "having": [],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "term": [["'issue'"], "'='", ["'BOOST-INBOX-4K'", "False"]],
                  "where": []
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "resolve_where",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 389,
                "pre_context": [
                  "        \"\"\"Given a list of parsed terms, construct their equivalent snql where",
                  "        conditions. filtering out any aggregates\"\"\"",
                  "        where_conditions: list[WhereType] = []",
                  "        for term in parsed_terms:",
                  "            if isinstance(term, event_search.SearchFilter):"
                ],
                "context_line": "                condition = self.format_search_filter(term)",
                "post_context": [
                  "                if condition:",
                  "                    where_conditions.append(condition)",
                  "",
                  "        return where_conditions",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "parsed_terms": [
                    [["'issue'"], "'='", ["'BOOST-INBOX-4K'", "False"]]
                  ],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "term": [["'issue'"], "'='", ["'BOOST-INBOX-4K'", "False"]],
                  "where_conditions": []
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "format_search_filter",
                "module": "sentry.search.events.builder.discover",
                "filename": "sentry/search/events/builder/discover.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/discover.py",
                "lineno": 140,
                "pre_context": [
                  "        most of the logic from the existing format_search_filter hasn't been",
                  "        converted over yet",
                  "        \"\"\"",
                  "        name = term.key.name",
                  ""
                ],
                "context_line": "        converted_filter = self.convert_search_filter_to_condition(",
                "post_context": [
                  "            event_search.SearchFilter(",
                  "                # We want to use group_id elsewhere so shouldn't be removed from the dataset",
                  "                # but if a user has a tag with the same name we want to make sure that works",
                  "                event_search.SearchKey(\"tags[group_id]\" if name == \"group_id\" else name),",
                  "                term.operator,"
                ],
                "in_app": true,
                "vars": {
                  "name": "'issue'",
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "term": [["'issue'"], "'='", ["'BOOST-INBOX-4K'", "False"]]
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "convert_search_filter_to_condition",
                "module": "sentry.search.events.builder.base",
                "filename": "sentry/search/events/builder/base.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/builder/base.py",
                "lineno": 1248,
                "pre_context": [
                  "",
                  "        if name in constants.NO_CONVERSION_FIELDS:",
                  "            return None",
                  "",
                  "        converter = self.search_filter_converter.get(name, self.default_filter_converter)"
                ],
                "context_line": "        return converter(search_filter)",
                "post_context": [
                  "",
                  "    def validate_uuid_like_filters(self, search_filter: event_search.SearchFilter):",
                  "        name = search_filter.key.name",
                  "        value = search_filter.value",
                  ""
                ],
                "in_app": true,
                "vars": {
                  "converter": "<bound method DiscoverDatasetConfig._issue_filter_converter of <sentry.search.events.datasets.discover.DiscoverDatasetConfig object at 0x7daf181b54f0>>",
                  "name": "'issue'",
                  "search_filter": [
                    ["'issue'"],
                    "'='",
                    ["'BOOST-INBOX-4K'", "False"]
                  ],
                  "self": "<sentry.search.events.builder.errors.ErrorsQueryBuilder object at 0x7daf18f5e5d0>",
                  "unit": "None",
                  "value": "'BOOST-INBOX-4K'"
                },
                "data": { "client_in_app": true }
              },
              {
                "function": "_issue_filter_converter",
                "module": "sentry.search.events.datasets.discover",
                "filename": "sentry/search/events/datasets/discover.py",
                "abs_path": "/usr/src/sentry/src/sentry/search/events/datasets/discover.py",
                "lineno": 1830,
                "pre_context": [
                  "                groups = Group.objects.by_qualified_short_id_bulk(",
                  "                    self.builder.params.organization.id,",
                  "                    group_short_ids,",
                  "                )",
                  "            except Exception:"
                ],
                "context_line": "                raise InvalidSearchQuery(f\"Invalid value '{group_short_ids}' for 'issue:' filter\")",
                "post_context": [
                  "            else:",
                  "                general_group_filter_values.extend(sorted([group.id for group in groups]))",
                  "",
                  "        if general_group_filter_values:",
                  "            return self.builder.convert_search_filter_to_condition("
                ],
                "in_app": true,
                "vars": {
                  "general_group_filter_values": [],
                  "group_short_ids": ["'BOOST-INBOX-4K'"],
                  "operator": "'='",
                  "search_filter": [
                    ["'issue'"],
                    "'='",
                    ["'BOOST-INBOX-4K'", "False"]
                  ],
                  "self": "<sentry.search.events.datasets.discover.DiscoverDatasetConfig object at 0x7daf181b54f0>",
                  "value": ["'BOOST-INBOX-4K'"]
                },
                "data": { "client_in_app": true }
              }
            ]
          },
          "mechanism": { "type": "logging", "handled": true, "exception_id": 0 }
        }
      ]
    },
    "extra": {
      "alert_rule_id": 226731,
      "organization_id": 1192616,
      "subscription_id": "60/7285b974098011efb28c12598142fbc4",
      "sys.argv": [
        "/usr/src/sentry/src/sentry/__main__.py",
        "run",
        "consumer",
        "events-subscription-results",
        "--consumer-group=sentry-events-subscription-results-consumers",
        "--",
        "--processes=8"
      ]
    },
    "fingerprint": ["{{ default }}"],
    "grouping_config": {
      "enhancements": "KLUv_SDt9QQAksgfJYDFbdPADbaFSujCL0TXQ5OZcrOTbxT5mzADQFk3piqNokYgyB8qmaqE7yNq0I_Fde6GfD6idAfB_5g7DX7W1vlhzeI-ZCfjNkcIiGahuX34KASpkkqmQDJJa-2zP_Tl3OY2ctr8m_DftSZAlRgMozCLYmiW5sAwoq_gdlTBIgoAXRCkhr6gYazCPyzjJRSJVVxDquOjChdUp84#KLUv_SDhxQQAcsgeI5C5DQ_9Fstb5Nexdk0wyc6Tm5lwo8jfzYyjQiKUYN9dwr-p8bl_JIJJonJpt-A6d0cuGzD6Y-B3y58F_2LrDK1ecP9xi3BZG0SoXFjbf25Gjiolgakqtc8OzY9yWVvqs_n34L9KSUiVFE2jNIxCcBinwI_OR3AzKiARCQBX4Aj6MlgLA3OtCJiaqhBF9UbUMP90ag8#KLUv_SCf5QMAIkcbI5C3OQ81RmL1vQi_TCMoiJBY2mBjTfbv3J1fxyadZbO7XshbSBLVF7kpbD-Lm8X2Yud1Flzv7bbFd9YCDyoFrL3dMw-NCiFJVFN6Lzuzozxrpzzh9g3cT0k6KqRQSlGLMmAWhrCOzkYsZFRAIgQQBWbRSsdk8H86KA",
      "id": "newstyle:2023-01-11"
    },
    "hashes": [
      "527fb99bdba09f9e450d99c7177bfed3",
      "1822aeea67d5227ffd6d8956ee41d3f7"
    ],
    "ingest_path": [
      {
        "version": "25.6.2",
        "public_key": "XE7QiyuNlja9PZ7I9qJlwQotzecWrUIN91BAO7Q5R38"
      }
    ],
    "key_id": "755931",
    "level": "error",
    "location": "sentry/search/events/datasets/discover.py",
    "logentry": { "formatted": "Failed to run comparison query", "params": [] },
    "logger": "sentry.incidents.utils.process_update_helpers",
    "main_exception_id": 0,
    "metadata": {
      "filename": "sentry/search/events/datasets/discover.py",
      "function": "_issue_filter_converter",
      "in_app_frame_mix": "mixed",
      "type": "InvalidSearchQuery",
      "value": "Invalid value '['BOOST-INBOX-4K']' for 'issue:' filter"
    },
    "modules": {
      "amqp": "5.3.1",
      "anyio": "3.7.1",
      "asgiref": "3.8.1",
      "attrs": "24.2.0",
      "avalara": "20.9.0",
      "beautifulsoup4": "4.7.1",
      "billiard": "4.2.1",
      "boto3": "1.34.128",
      "botocore": "1.34.128",
      "brotli": "1.1.0",
      "cachetools": "5.3.0",
      "celery": "5.5.2",
      "certifi": "2024.7.4",
      "cffi": "1.17.1",
      "chardet": "5.2.0",
      "charset-normalizer": "3.4.0",
      "click": "8.2.1",
      "click-didyoumean": "0.3.1",
      "click-plugins": "1.1.1",
      "click-repl": "0.3.0",
      "confluent-kafka": "2.8.0",
      "cronsim": "2.6",
      "cryptography": "44.0.1",
      "cssselect": "1.0.3",
      "cssutils": "2.9.0",
      "datadog": "0.49.1",
      "deprecated": "1.2.18",
      "distro": "1.8.0",
      "django": "5.2.1",
      "django-crispy-forms": "1.14.0",
      "django-pg-zero-downtime-migrations": "0.18",
      "django_csp": "3.8",
      "djangorestframework": "3.16.0",
      "drf-spectacular": "0.27.2",
      "fastjsonschema": "2.16.2",
      "fido2": "0.9.2",
      "filelock": "3.15.3",
      "getsentry": "0.0.0",
      "google-api-core": "2.19.1",
      "google-auth": "2.29.0",
      "google-cloud-bigtable": "2.30.1",
      "google-cloud-build": "3.24.2",
      "google-cloud-core": "2.4.1",
      "google-cloud-functions": "1.17.0",
      "google-cloud-kms": "2.24.2",
      "google-cloud-pubsub": "2.23.0",
      "google-cloud-spanner": "3.49.0",
      "google-cloud-storage": "2.18.0",
      "google-crc32c": "1.6.0",
      "google-resumable-media": "2.7.0",
      "googleapis-common-protos": "1.63.2",
      "grpc-google-iam-v1": "0.13.1",
      "grpc-stubs": "1.53.0.5",
      "grpcio": "1.67.0",
      "grpcio-status": "1.67.0",
      "h11": "0.14.0",
      "h2": "4.2.0",
      "hiredis": "2.3.2",
      "hpack": "4.1.0",
      "httpcore": "1.0.2",
      "httpx": "0.25.2",
      "hyperframe": "6.1.0",
      "idna": "3.7",
      "importlib_metadata": "8.6.1",
      "inflection": "0.5.1",
      "iso3166": "2.1.1",
      "isodate": "0.6.1",
      "jmespath": "0.10.0",
      "jsonschema": "4.20.0",
      "jsonschema-specifications": "2023.7.1",
      "kombu": "5.5.3",
      "lxml": "5.3.0",
      "maxminddb": "2.3.0",
      "milksnake": "0.1.6",
      "mistune": "2.0.4",
      "mmh3": "4.0.0",
      "msgpack": "1.1.0",
      "oauthlib": "3.1.0",
      "openai": "1.3.5",
      "opentelemetry-api": "1.33.1",
      "opentelemetry-sdk": "1.33.1",
      "opentelemetry-semantic-conventions": "0.54b1",
      "orjson": "3.10.10",
      "packaging": "24.1",
      "parsimonious": "0.10.0",
      "petname": "2.6",
      "phonenumberslite": "8.12.55",
      "pillow": "11.0.0",
      "pip": "24.3.1",
      "prompt_toolkit": "3.0.51",
      "proto-plus": "1.25.0",
      "protobuf": "5.27.3",
      "psutil": "5.9.7",
      "psycopg2-binary": "2.9.10",
      "pyasn1": "0.4.5",
      "pyasn1-modules": "0.2.4",
      "pycountry": "17.5.14",
      "pycparser": "2.21",
      "pydantic": "1.10.20",
      "pyjwt": "2.4.0",
      "pymemcache": "4.0.0",
      "python-dateutil": "2.9.0.post0",
      "python-rapidjson": "1.8",
      "python-u2flib-server": "5.0.0",
      "python3-saml": "1.15.0",
      "pyuwsgi": "2.0.28.post1",
      "pyvat": "1.3.15",
      "pyyaml": "6.0.2",
      "rb": "1.10.0",
      "redis": "3.4.1",
      "redis-py-cluster": "2.1.0",
      "referencing": "0.30.2",
      "regex": "2022.9.13",
      "reportlab": "4.4.0",
      "requests": "2.32.3",
      "requests-file": "2.1.0",
      "requests-oauthlib": "1.2.0",
      "rfc3339-validator": "0.1.2",
      "rfc3986-validator": "0.1.1",
      "rpds-py": "0.20.0",
      "rsa": "4.8",
      "s3transfer": "0.10.0",
      "sentry": "25.7.0.dev0",
      "sentry-arroyo": "2.25.0",
      "sentry-kafka-schemas": "1.3.13",
      "sentry-protos": "0.2.1",
      "sentry-redis-tools": "0.5.0",
      "sentry-relay": "0.9.9",
      "sentry-sdk": "3.0.0a2",
      "sentry-usage-accountant": "0.0.10",
      "sentry_forked_email_reply_parser": "0.5.12.post1",
      "sentry_ophio": "1.1.3",
      "setuptools": "70.0.0",
      "simplejson": "3.17.6",
      "six": "1.17.0",
      "slack_sdk": "3.27.2",
      "sniffio": "1.3.1",
      "snuba-sdk": "3.0.43",
      "soupsieve": "2.3.2.post1",
      "sqlparse": "0.5.0",
      "statsd": "3.3.0",
      "stripe": "6.7.0",
      "structlog": "22.1.0",
      "symbolic": "12.14.1",
      "tiktoken": "0.8.0",
      "tldextract": "5.1.2",
      "toronado": "0.1.0",
      "tqdm": "4.66.4",
      "typing_extensions": "4.12.0",
      "tzdata": "2025.2",
      "ua-parser": "0.10.0",
      "unidiff": "0.7.4",
      "uritemplate": "4.1.1",
      "urllib3": "2.2.2",
      "vine": "5.1.0",
      "vroomrs": "0.1.6",
      "wcwidth": "0.2.13",
      "wrapt": "1.17.2",
      "xmlsec": "1.3.14",
      "zipp": "3.21.0",
      "zstandard": "0.18.0"
    },
    "nodestore_insert": 1751474586.963507,
    "received": 1751474584.458952,
    "sdk": {
      "name": "sentry.python.django",
      "version": "3.0.0a2",
      "integrations": [
        "argv",
        "atexit",
        "celery",
        "dedupe",
        "django",
        "django_atomic",
        "excepthook",
        "logging",
        "modules",
        "redis",
        "rust_info",
        "stdlib",
        "threading"
      ],
      "packages": [{ "name": "pypi:sentry-sdk", "version": "3.0.0a2" }]
    },
    "timestamp": 1751474584.442766,
    "title": "InvalidSearchQuery: Invalid value '['BOOST-INBOX-4K']' for 'issue:' filter",
    "transaction_info": {},
    "type": "error",
    "version": "7"
  }
